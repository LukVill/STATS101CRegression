# make list of workflows
wf_set <- workflow_set(preproc = recipe_list, models = model_list, cross = T)
combn(5,2)
combn(5,1)
combn(5,5)
combn(5,3)
combn(5,5)
combn(5,4)
combn(14,2)
# make list of workflows
wf_set <- workflow_set(preproc = recipe_list, models = model_list, cross = T)
# make list of workflows
wf_set <- workflow_set(preproc = list(rec_default, rec_norm_resp), models = model_list, cross = T)
# make list of workflows
wf_set <- workflow_set(preproc = list(rec_default %>% step_log(all_numeric_predictors(), base = 10)), models = model_list, cross = T)
# make list of workflows
wf_set <- workflow_set(preproc = list(rec_default %>% step_log(all_numeric_predictors(), base = 10), rec_default %>% step_BoxCox(all_numeric_predictors()) %>% step_log(all_numeric_predictors())), models = model_list, cross = T)
wf_set
recipe_list[1]
# make list of workflows
wf_set <- workflow_set(preproc = recipe_list[1:3], models = model_list, cross = T)
# make list of workflows
wf_set <- workflow_set(preproc = recipe_list[1], models = model_list, cross = T)
# make list of workflows
wf_set <- workflow_set(preproc = recipe_list[[1]], models = model_list, cross = T)
# make list of workflows
wf_set <- workflow_set(preproc = recipe_list[1], models = model_list, cross = T)
# remove name from training data
train$name <- NULL
# possible transformations: log, normalization, boxcox
# offset by 1 because there are some 0's in the data
# remove na observations
# remove all highly correlated data to avoid multicollinearity that would affect ML models
# NOTE: ALL OF THESE RECIPES OFFSET THE DATA FIRST BY 1 BEFORE TRANSFORMING
# TUNABLE PARAMS: threshold
rec_default <- recipe(percent_dem ~ ., data = train) %>% step_rm(id) %>% step_naomit(all_numeric_predictors()) %>% step_naomit(all_numeric_predictors()) %>% step_mutate_at(all_numeric_predictors(), fn = function(x){x + 1}) %>% step_corr(all_numeric_predictors(), threshold = tune())
rec_norm_resp <- rec_default %>% step_normalize(all_outcomes())
# make a function to attach pipeline to both default rec and normalized resp. rec
# INPUT: LIST of recipes, not concat
gen_recipe_list <- function(recipe_list)
{
res <- list()
# for each default recipe in recipe_list, append onto a list each permutation
for(i in seq_along(recipe_list))
{
rec <- recipe_list[i]
x <- rec %>% step_log(all_numeric_predictors(), base = 10)
res <- append(res, x)
x <- rec %>% step_normalize(all_numeric_predictors())
res <- append(res, x)
x <- rec %>% step_log(all_numeric_predictors(), base = 10) %>% step_normalize(all_numeric_predictors())
res <- append(res, x)
x <- rec %>% step_normalize(all_numeric_predictors()) %>% step_log(all_numeric_predictors(), base = 10)
res <- append(res, x)
x <- rec %>% step_BoxCox(all_numeric_predictors())
res <- append(res, x)
x <- rec %>% step_log(all_numeric_predictors()) %>% step_BoxCox(all_numeric_predictors())
res <- append(res, x)
x <- rec %>% step_BoxCox(all_numeric_predictors()) %>% step_log(all_numeric_predictors())
res <- append(res, x)
}
return(res)
}
recipe_list <- gen_recipe_list(list(rec_default, rec_norm_resp))
# log_rec <- rec %>% step_log(all_numeric_predictors(), base = 10)
#
# norm_rec <- rec %>% step_normalize(all_numeric_predictors())
#
# log_norm_rec <- rec %>% step_log(all_numeric_predictors(), base = 10) %>% step_normalize(all_numeric_predictors())
#
# norm_log_rec <- rec %>% step_normalize(all_numeric_predictors()) %>% step_log(all_numeric_predictors(), base = 10)
#
# box_rec <- rec %>% step_BoxCox(all_numeric_predictors())
#
# log_box_rec <- rec %>% step_log(all_numeric_predictors()) %>% step_BoxCox(all_numeric_predictors())
#
# box_log_rec <- rec %>% step_BoxCox(all_numeric_predictors()) %>% step_log(all_numeric_predictors())
# make list of workflows
wf_set <- workflow_set(preproc = recipe_list[1], models = model_list, cross = T)
recipe_list[1]
# make list of workflows
wf_set <- workflow_set(preproc = recipe_list, models = model_list, cross = T)
recipe_list
# remove name from training data
train$name <- NULL
# possible transformations: log, normalization, boxcox
# offset by 1 because there are some 0's in the data
# remove na observations
# remove all highly correlated data to avoid multicollinearity that would affect ML models
# NOTE: ALL OF THESE RECIPES OFFSET THE DATA FIRST BY 1 BEFORE TRANSFORMING
# TUNABLE PARAMS: threshold
rec_default <- recipe(percent_dem ~ ., data = train) %>% step_rm(id) %>% step_naomit(all_numeric_predictors()) %>% step_naomit(all_numeric_predictors()) %>% step_mutate_at(all_numeric_predictors(), fn = function(x){x + 1}) %>% step_corr(all_numeric_predictors(), threshold = tune())
rec_norm_resp <- rec_default %>% step_normalize(all_outcomes())
# make a function to attach pipeline to both default rec and normalized resp. rec
# INPUT: LIST of recipes, not concat
gen_recipe_list <- function(recipe_list)
{
res <- list()
# for each default recipe in recipe_list, append onto a list each permutation
for(i in seq_along(recipe_list))
{
rec <- recipe_list[i]
x <- rec %>% step_log(all_numeric_predictors(), base = 10)
res <- list(res, x)
x <- rec %>% step_normalize(all_numeric_predictors())
res <- list(res, x)
x <- rec %>% step_log(all_numeric_predictors(), base = 10) %>% step_normalize(all_numeric_predictors())
res <- list(res, x)
x <- rec %>% step_normalize(all_numeric_predictors()) %>% step_log(all_numeric_predictors(), base = 10)
res <- list(res, x)
x <- rec %>% step_BoxCox(all_numeric_predictors())
res <- list(res, x)
x <- rec %>% step_log(all_numeric_predictors()) %>% step_BoxCox(all_numeric_predictors())
res <- list(res, x)
x <- rec %>% step_BoxCox(all_numeric_predictors()) %>% step_log(all_numeric_predictors())
res <- list(res, x)
}
return(res)
}
recipe_list <- gen_recipe_list(list(rec_default, rec_norm_resp))
# log_rec <- rec %>% step_log(all_numeric_predictors(), base = 10)
#
# norm_rec <- rec %>% step_normalize(all_numeric_predictors())
#
# log_norm_rec <- rec %>% step_log(all_numeric_predictors(), base = 10) %>% step_normalize(all_numeric_predictors())
#
# norm_log_rec <- rec %>% step_normalize(all_numeric_predictors()) %>% step_log(all_numeric_predictors(), base = 10)
#
# box_rec <- rec %>% step_BoxCox(all_numeric_predictors())
#
# log_box_rec <- rec %>% step_log(all_numeric_predictors()) %>% step_BoxCox(all_numeric_predictors())
#
# box_log_rec <- rec %>% step_BoxCox(all_numeric_predictors()) %>% step_log(all_numeric_predictors())
# make list of workflows
wf_set <- workflow_set(preproc = recipe_list, models = model_list, cross = T)
# remove name from training data
train$name <- NULL
# possible transformations: log, normalization, boxcox
# offset by 1 because there are some 0's in the data
# remove na observations
# remove all highly correlated data to avoid multicollinearity that would affect ML models
# NOTE: ALL OF THESE RECIPES OFFSET THE DATA FIRST BY 1 BEFORE TRANSFORMING
# TUNABLE PARAMS: threshold
rec_default <- recipe(percent_dem ~ ., data = train) %>% step_rm(id) %>% step_naomit(all_numeric_predictors()) %>% step_naomit(all_numeric_predictors()) %>% step_mutate_at(all_numeric_predictors(), fn = function(x){x + 1}) %>% step_corr(all_numeric_predictors(), threshold = tune())
rec_norm_resp <- rec_default %>% step_normalize(all_outcomes())
# make a function to attach pipeline to both default rec and normalized resp. rec
# INPUT: LIST of recipes, not concat
gen_recipe_list <- function(recipe_list)
{
res <- list()
# for each default recipe in recipe_list, append onto a list each permutation
for(i in seq_along(recipe_list))
{
rec <- recipe_list[[i]]
x <- rec %>% step_log(all_numeric_predictors(), base = 10)
res <- list(res, x)
x <- rec %>% step_normalize(all_numeric_predictors())
res <- list(res, x)
x <- rec %>% step_log(all_numeric_predictors(), base = 10) %>% step_normalize(all_numeric_predictors())
res <- list(res, x)
x <- rec %>% step_normalize(all_numeric_predictors()) %>% step_log(all_numeric_predictors(), base = 10)
res <- list(res, x)
x <- rec %>% step_BoxCox(all_numeric_predictors())
res <- list(res, x)
x <- rec %>% step_log(all_numeric_predictors()) %>% step_BoxCox(all_numeric_predictors())
res <- list(res, x)
x <- rec %>% step_BoxCox(all_numeric_predictors()) %>% step_log(all_numeric_predictors())
res <- list(res, x)
}
return(res)
}
recipe_list <- gen_recipe_list(list(rec_default, rec_norm_resp))
# log_rec <- rec %>% step_log(all_numeric_predictors(), base = 10)
#
# norm_rec <- rec %>% step_normalize(all_numeric_predictors())
#
# log_norm_rec <- rec %>% step_log(all_numeric_predictors(), base = 10) %>% step_normalize(all_numeric_predictors())
#
# norm_log_rec <- rec %>% step_normalize(all_numeric_predictors()) %>% step_log(all_numeric_predictors(), base = 10)
#
# box_rec <- rec %>% step_BoxCox(all_numeric_predictors())
#
# log_box_rec <- rec %>% step_log(all_numeric_predictors()) %>% step_BoxCox(all_numeric_predictors())
#
# box_log_rec <- rec %>% step_BoxCox(all_numeric_predictors()) %>% step_log(all_numeric_predictors())
# make list of workflows
wf_set <- workflow_set(preproc = recipe_list, models = model_list, cross = T)
# make a function to attach pipeline to both default rec and normalized resp. rec
list(rec_default,rec_default)
rec <- rec_default
rec %>% step_log(all_numeric_predictors(), base = 10)
res <- list()
x <- rec %>% step_log(all_numeric_predictors(), base = 10)
x
res
list(res, x)
rm(res)
res <- NULL
rec <- recipe_list[i]
rec
x <- rec %>% step_log(all_numeric_predictors(), base = 10)
res <- list(res, x)
res
x <- rec %>% step_normalize(all_numeric_predictors())
res <- list(res, x)
x <- rec %>% step_log(all_numeric_predictors(), base = 10) %>% step_normalize(all_numeric_predictors())
res <- list(res, x)
x <- rec %>% step_normalize(all_numeric_predictors()) %>% step_log(all_numeric_predictors(), base = 10)
res <- list(res, x)
x <- rec %>% step_BoxCox(all_numeric_predictors())
res <- list(res, x)
x <- rec %>% step_log(all_numeric_predictors()) %>% step_BoxCox(all_numeric_predictors())
res <- list(res, x)
x <- rec %>% step_BoxCox(all_numeric_predictors()) %>% step_log(all_numeric_predictors())
res <- list(res, x)
res
res <- NULL
res
x <- rec %>% step_log(all_numeric_predictors(), base = 10)
res <- append(res, x)
x <- rec %>% step_normalize(all_numeric_predictors())
res <- append(res, x)
x <- rec %>% step_log(all_numeric_predictors(), base = 10) %>% step_normalize(all_numeric_predictors())
res <- append(res, x)
x <- rec %>% step_normalize(all_numeric_predictors()) %>% step_log(all_numeric_predictors(), base = 10)
res <- append(res, x)
x <- rec %>% step_BoxCox(all_numeric_predictors())
res <- append(res, x)
x <- rec %>% step_log(all_numeric_predictors()) %>% step_BoxCox(all_numeric_predictors())
res <- append(res, x)
x <- rec %>% step_BoxCox(all_numeric_predictors()) %>% step_log(all_numeric_predictors())
res <- append(res, x)
res
# remove name from training data
train$name <- NULL
# possible transformations: log, normalization, boxcox
# offset by 1 because there are some 0's in the data
# remove na observations
# remove all highly correlated data to avoid multicollinearity that would affect ML models
# NOTE: ALL OF THESE RECIPES OFFSET THE DATA FIRST BY 1 BEFORE TRANSFORMING
# TUNABLE PARAMS: threshold
rec_default <- recipe(percent_dem ~ ., data = train) %>% step_rm(id) %>% step_naomit(all_numeric_predictors()) %>% step_naomit(all_numeric_predictors()) %>% step_mutate_at(all_numeric_predictors(), fn = function(x){x + 1}) %>% step_corr(all_numeric_predictors(), threshold = tune())
rec_norm_resp <- rec_default %>% step_normalize(all_outcomes())
# make a function to attach pipeline to both default rec and normalized resp. rec
# INPUT: LIST of recipes, not concat
gen_recipe_list <- function(recipe_list)
{
res <- NULL
# for each default recipe in recipe_list, append onto a list each permutation
for(i in seq_along(recipe_list))
{
rec <- recipe_list[i]
x <- rec %>% step_log(all_numeric_predictors(), base = 10)
res <- append(res, x)
x <- rec %>% step_normalize(all_numeric_predictors())
res <- append(res, x)
x <- rec %>% step_log(all_numeric_predictors(), base = 10) %>% step_normalize(all_numeric_predictors())
res <- append(res, x)
x <- rec %>% step_normalize(all_numeric_predictors()) %>% step_log(all_numeric_predictors(), base = 10)
res <- append(res, x)
x <- rec %>% step_BoxCox(all_numeric_predictors())
res <- append(res, x)
x <- rec %>% step_log(all_numeric_predictors()) %>% step_BoxCox(all_numeric_predictors())
res <- append(res, x)
x <- rec %>% step_BoxCox(all_numeric_predictors()) %>% step_log(all_numeric_predictors())
res <- append(res, x)
}
return(res[-1])
}
recipe_list <- gen_recipe_list(list(rec_default, rec_norm_resp))
# log_rec <- rec %>% step_log(all_numeric_predictors(), base = 10)
#
# norm_rec <- rec %>% step_normalize(all_numeric_predictors())
#
# log_norm_rec <- rec %>% step_log(all_numeric_predictors(), base = 10) %>% step_normalize(all_numeric_predictors())
#
# norm_log_rec <- rec %>% step_normalize(all_numeric_predictors()) %>% step_log(all_numeric_predictors(), base = 10)
#
# box_rec <- rec %>% step_BoxCox(all_numeric_predictors())
#
# log_box_rec <- rec %>% step_log(all_numeric_predictors()) %>% step_BoxCox(all_numeric_predictors())
#
# box_log_rec <- rec %>% step_BoxCox(all_numeric_predictors()) %>% step_log(all_numeric_predictors())
# make list of workflows
wf_set <- workflow_set(preproc = recipe_list, models = model_list, cross = T)
rec
x <- rec %>% step_log(all_numeric_predictors(), base = 10)
x
res <- NULL
append(res, x)
rec %>% step_log(all_numeric_predictors(), base = 10)
c(res, x)
rec
rec %>% step_log(all_numeric_predictors(), base = 10)
list(rec_default,rec_default)
res <- append(res, x)
res <- NULL
append(res, x)
rec <- rec_default
append(res, x)
res <- append(res, x)
res[1]
res[2]
res[[1]]
res <- NULL
x <- rec %>% step_log(all_numeric_predictors(), base = 10)
class(x)
list(res, x)
res <- list(res, x)
x <- rec %>% step_normalize(all_numeric_predictors())
res
list(res, x)
append(res, x)
append(c(res), x)
res
list(res)
res
c(res,2)
c(res,c(2))
list(res,c(2))
append(res,c(2))
append(res,list(2))
append(res,list(2,3))
append(res,c(2,3))
y <- c(2,3)
append(res,y)
list(res,y)
list(res,rec_norm_resp)
c(res,rec_norm_resp)
list(res,rec_norm_resp)
flatten(list(res,rec_norm_resp))
gen_recipe_modf_list <- function(rec, varName = "")
{
# for each default recipe in recipe_list, append onto a list each permutation
log_rec <- rec %>% step_log(all_numeric_predictors(), base = 10)
norm_rec <- rec %>% step_normalize(all_numeric_predictors())
log_norm_rec <- rec %>% step_log(all_numeric_predictors(), base = 10) %>% step_normalize(all_numeric_predictors())
norm_log_rec <- rec %>% step_normalize(all_numeric_predictors()) %>% step_log(all_numeric_predictors(), base = 10)
box_rec <- rec %>% step_BoxCox(all_numeric_predictors())
log_box_rec <- rec %>% step_log(all_numeric_predictors()) %>% step_BoxCox(all_numeric_predictors())
box_log_rec <- rec %>% step_BoxCox(all_numeric_predictors()) %>% step_log(all_numeric_predictors())
return(list(log_rec = log_rec, norm_rec = norm_rec, log_norm_rec = log_norm_rec, norm_log_rec = norm_log_rec, box_rec = box_rec, log_box_rec = log_box_rec, box_log_rec = box_log_rec))
}
gen_recipe_modf_list <- function(rec)
{
# for each default recipe in recipe_list, append onto a list each permutation
log_rec <- rec %>% step_log(all_numeric_predictors(), base = 10)
norm_rec <- rec %>% step_normalize(all_numeric_predictors())
log_norm_rec <- rec %>% step_log(all_numeric_predictors(), base = 10) %>% step_normalize(all_numeric_predictors())
norm_log_rec <- rec %>% step_normalize(all_numeric_predictors()) %>% step_log(all_numeric_predictors(), base = 10)
box_rec <- rec %>% step_BoxCox(all_numeric_predictors())
log_box_rec <- rec %>% step_log(all_numeric_predictors()) %>% step_BoxCox(all_numeric_predictors())
box_log_rec <- rec %>% step_BoxCox(all_numeric_predictors()) %>% step_log(all_numeric_predictors())
return(list(log_rec = log_rec, norm_rec = norm_rec, log_norm_rec = log_norm_rec, norm_log_rec = norm_log_rec, box_rec = box_rec, log_box_rec = log_box_rec, box_log_rec = box_log_rec))
}
recipe_list <- gen_recipe_list(rec_default)
recipe_list
# make list of workflows
wf_set <- workflow_set(preproc = recipe_list, models = model_list, cross = T)
# make list of workflows
wf_set <- workflow_set(preproc = rec_default, models = model_list, cross = T)
# make list of workflows
wf_set <- workflow_set(preproc = list(rec_default), models = model_list, cross = T)
# make list of workflows
wf_set <- workflow_set(preproc = list(t = rec_default), models = model_list, cross = T)
# make list of workflows
wf_set <- workflow_set(preproc = list(t = rec_default, y = rec_norm_resp), models = model_list, cross = T)
rec
log_rec <- rec %>% step_log(all_numeric_predictors(), base = 10)
norm_rec <- rec %>% step_normalize(all_numeric_predictors())
log_norm_rec <- rec %>% step_log(all_numeric_predictors(), base = 10) %>% step_normalize(all_numeric_predictors())
norm_log_rec <- rec %>% step_normalize(all_numeric_predictors()) %>% step_log(all_numeric_predictors(), base = 10)
box_rec <- rec %>% step_BoxCox(all_numeric_predictors())
log_box_rec <- rec %>% step_log(all_numeric_predictors()) %>% step_BoxCox(all_numeric_predictors())
box_log_rec <- rec %>% step_BoxCox(all_numeric_predictors()) %>% step_log(all_numeric_predictors())
list(log_rec = log_rec, norm_rec = norm_rec, log_norm_rec = log_norm_rec, norm_log_rec = norm_log_rec, box_rec = box_rec, log_box_rec = log_box_rec, box_log_rec = box_log_rec)
gen_recipe_modf_list <- function(rec)
{
# for each default recipe in recipe_list, append onto a list each permutation
log_rec <- rec %>% step_log(all_numeric_predictors(), base = 10)
norm_rec <- rec %>% step_normalize(all_numeric_predictors())
log_norm_rec <- rec %>% step_log(all_numeric_predictors(), base = 10) %>% step_normalize(all_numeric_predictors())
norm_log_rec <- rec %>% step_normalize(all_numeric_predictors()) %>% step_log(all_numeric_predictors(), base = 10)
box_rec <- rec %>% step_BoxCox(all_numeric_predictors())
log_box_rec <- rec %>% step_log(all_numeric_predictors()) %>% step_BoxCox(all_numeric_predictors())
box_log_rec <- rec %>% step_BoxCox(all_numeric_predictors()) %>% step_log(all_numeric_predictors())
return(list(log_rec = log_rec, norm_rec = norm_rec, log_norm_rec = log_norm_rec, norm_log_rec = norm_log_rec, box_rec = box_rec, log_box_rec = log_box_rec, box_log_rec = box_log_rec))
}
gen_recipe_list(rec_default)
recipe_list <- class(gen_recipe_list(rec_default))
class(gen_recipe_list(rec_default))
list(log_rec = log_rec, norm_rec = norm_rec, log_norm_rec = log_norm_rec, norm_log_rec = norm_log_rec, box_rec = box_rec, log_box_rec = log_box_rec, box_log_rec = box_log_rec)
recipe_list <- list(log_rec = log_rec, norm_rec = norm_rec, log_norm_rec = log_norm_rec, norm_log_rec = norm_log_rec, box_rec = box_rec, log_box_rec = log_box_rec, box_log_rec = box_log_rec)
# make list of workflows
wf_set <- workflow_set(preproc = recipe_list, models = model_list, cross = T)
wf_set
help("collect_metrics")
wf_set$info
wf_set$info[1]
wf_set$info[1]$model
parameters(linear_model)
parameters(tree_model)
parameters(r_forest_model)
help("grid_regular")
grid_regular(parameters(r_forest_model), levels = 5)
grid_random(parameters(r_forest_model), levels = 5)
# TUNING PARAMETERS: try using both regular AND random gridding
help("tune_grid")
help("tune_grid")
# make list of recipes and models to combine different permutations in workflows
# make them work for CV resampling
rec <- rec_default
log_rec <- rec %>% step_log(all_numeric_predictors(), base = 10)
norm_rec <- rec %>% step_normalize(all_numeric_predictors())
log_norm_rec <- rec %>% step_log(all_numeric_predictors(), base = 10) %>% step_normalize(all_numeric_predictors())
norm_log_rec <- rec %>% step_normalize(all_numeric_predictors()) %>% step_log(all_numeric_predictors(), base = 10)
box_rec <- rec %>% step_BoxCox(all_numeric_predictors())
log_box_rec <- rec %>% step_log(all_numeric_predictors()) %>% step_BoxCox(all_numeric_predictors())
box_log_rec <- rec %>% step_BoxCox(all_numeric_predictors()) %>% step_log(all_numeric_predictors())
recipe_list <- list(log_rec = log_rec, norm_rec = norm_rec, log_norm_rec = log_norm_rec, norm_log_rec = norm_log_rec, box_rec = box_rec, log_box_rec = log_box_rec, box_log_rec = box_log_rec)
# make list of workflows
wf_set <- workflow_set(preproc = recipe_list, models = model_list, cross = T)
linear_model <- linear_reg() %>% set_engine("lm") %>% set_mode("regression")
# TUNABLE PARAMS: cost_complexity, tree depth
tree_model <- decision_tree(cost_complexity = tune(), tree_depth = tune()) %>% set_engine("rpart") %>% set_mode("regression")
# TUNABLE PARAMS: tree num, min n for each node
r_forest_model <- rand_forest(trees = tune(), min_n = tune()) %>% set_engine("ranger") %>% set_mode("regression")
# TUNABLE PARAMS: tree num, min n for each node, learn rate
boost_tree_model <- boost_tree(trees = tune(), min_n = tune(), learn_rate = tune()) %>% set_engine("xgboost") %>% set_mode("regression")
model_list <- list(linear_model, tree_model, r_forest_model, boost_tree_model)
# CROSS VALIDATE TRAIN TO AVOID OVERFITTING
# set seed for reproducibility
set.seed(101)
# going to use 233 partitions so there would be close to 10 used for assessment
train_split <- vfold_cv(train, v = 233)
# make strata be response variable
train_split_strata <- vfold_cv(train, v = 233, strata = percent_dem)
help(workflow_map)
help("workflow_map")
1
wf_metrics <- custom_metrics(rmse,roc_auc)
5
library(knitr)
library(tidyverse)
library(tidymodels)
library(stringr)
library(corrplot)
wf_metrics <- custom_metric(rmse,roc_auc)
library(knitr)
library(tidyverse)
library(tidymodels)
library(stringr)
library(corrplot)
# SET THE WD TO YOUR FOLDER
trainFilepath <- paste0(getwd(),"/train.csv")
testFilepath <- paste0(getwd(),"/test.csv")
columnDescFilepath <- paste0(getwd(),"/column_descriptions.csv")
train <- read.csv(trainFilepath)
test <- read.csv(testFilepath)
column_desc <- read.csv(columnDescFilepath)
# remove name from training data
train$name <- NULL
# possible transformations: log, normalization, boxcox
# offset by 1 because there are some 0's in the data
# remove na observations
# remove all highly correlated data to avoid multicollinearity that would affect ML models
# NOTE: ALL OF THESE RECIPES OFFSET THE DATA FIRST BY 1 BEFORE TRANSFORMING
# TUNABLE PARAMS: threshold
rec_default <- recipe(percent_dem ~ ., data = train) %>% step_rm(id) %>% step_naomit(all_numeric_predictors()) %>% step_naomit(all_numeric_predictors()) %>% step_mutate_at(all_numeric_predictors(), fn = function(x){x + 1}) %>% step_corr(all_numeric_predictors(), threshold = tune())
rec_norm_resp <- rec_default %>% step_normalize(all_outcomes())
# CROSS VALIDATE TRAIN TO AVOID OVERFITTING
# set seed for reproducibility
set.seed(101)
# going to use 233 partitions so there would be close to 10 used for assessment
train_split <- vfold_cv(train, v = 233)
# make strata be response variable
train_split_strata <- vfold_cv(train, v = 233, strata = percent_dem)
linear_model <- linear_reg() %>% set_engine("lm") %>% set_mode("regression")
# TUNABLE PARAMS: cost_complexity, tree depth
tree_model <- decision_tree(cost_complexity = tune(), tree_depth = tune()) %>% set_engine("rpart") %>% set_mode("regression")
# TUNABLE PARAMS: tree num, min n for each node
r_forest_model <- rand_forest(trees = tune(), min_n = tune()) %>% set_engine("ranger") %>% set_mode("regression")
# TUNABLE PARAMS: tree num, min n for each node, learn rate
boost_tree_model <- boost_tree(trees = tune(), min_n = tune(), learn_rate = tune()) %>% set_engine("xgboost") %>% set_mode("regression")
model_list <- list(linear_model, tree_model, r_forest_model, boost_tree_model)
# make list of recipes and models to combine different permutations in workflows
# make them work for CV resampling
rec <- rec_default
log_rec <- rec %>% step_log(all_numeric_predictors(), base = 10)
norm_rec <- rec %>% step_normalize(all_numeric_predictors())
log_norm_rec <- rec %>% step_log(all_numeric_predictors(), base = 10) %>% step_normalize(all_numeric_predictors())
norm_log_rec <- rec %>% step_normalize(all_numeric_predictors()) %>% step_log(all_numeric_predictors(), base = 10)
box_rec <- rec %>% step_BoxCox(all_numeric_predictors())
log_box_rec <- rec %>% step_log(all_numeric_predictors()) %>% step_BoxCox(all_numeric_predictors())
box_log_rec <- rec %>% step_BoxCox(all_numeric_predictors()) %>% step_log(all_numeric_predictors())
recipe_list <- list(log_rec = log_rec, norm_rec = norm_rec, log_norm_rec = log_norm_rec, norm_log_rec = norm_log_rec, box_rec = box_rec, log_box_rec = log_box_rec, box_log_rec = box_log_rec)
# make list of workflows
wf_set <- workflow_set(preproc = recipe_list, models = model_list, cross = T)
wf_metrics <- custom_metric(rmse,roc_auc)
yardstick::custom_metric
yardstick
library(tidymodels)
tidymodels
library(knitr)
library(tidyverse)
library(tidymodels)
library(stringr)
library(corrplot)
knitr
library(yardstick)
# find best model
wf_set %>% workflow_map(fn = "tune_grid", resamples = train_split)
